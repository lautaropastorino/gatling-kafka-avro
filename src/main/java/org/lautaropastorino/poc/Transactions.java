/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.lautaropastorino.poc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8057706547331168791L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transactions\",\"namespace\":\"org.lautaropastorino.poc\",\"fields\":[{\"name\":\"establishmentId\",\"type\":\"string\"},{\"name\":\"transactionAmount\",\"type\":\"double\"},{\"name\":\"authorizationDate\",\"type\":\"string\"},{\"name\":\"otherField\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"anotherField\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"evenAnotherField\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transactions> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transactions> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transactions> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transactions to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transactions from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transactions instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence establishmentId;
  private double transactionAmount;
  private java.lang.CharSequence authorizationDate;
  private java.lang.CharSequence otherField;
  private java.lang.CharSequence anotherField;
  private java.lang.CharSequence evenAnotherField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transactions() {}

  /**
   * All-args constructor.
   * @param establishmentId The new value for establishmentId
   * @param transactionAmount The new value for transactionAmount
   * @param authorizationDate The new value for authorizationDate
   * @param otherField The new value for otherField
   * @param anotherField The new value for anotherField
   * @param evenAnotherField The new value for evenAnotherField
   */
  public Transactions(java.lang.CharSequence establishmentId, java.lang.Double transactionAmount, java.lang.CharSequence authorizationDate, java.lang.CharSequence otherField, java.lang.CharSequence anotherField, java.lang.CharSequence evenAnotherField) {
    this.establishmentId = establishmentId;
    this.transactionAmount = transactionAmount;
    this.authorizationDate = authorizationDate;
    this.otherField = otherField;
    this.anotherField = anotherField;
    this.evenAnotherField = evenAnotherField;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return establishmentId;
    case 1: return transactionAmount;
    case 2: return authorizationDate;
    case 3: return otherField;
    case 4: return anotherField;
    case 5: return evenAnotherField;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: establishmentId = (java.lang.CharSequence)value$; break;
    case 1: transactionAmount = (java.lang.Double)value$; break;
    case 2: authorizationDate = (java.lang.CharSequence)value$; break;
    case 3: otherField = (java.lang.CharSequence)value$; break;
    case 4: anotherField = (java.lang.CharSequence)value$; break;
    case 5: evenAnotherField = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'establishmentId' field.
   * @return The value of the 'establishmentId' field.
   */
  public java.lang.CharSequence getEstablishmentId() {
    return establishmentId;
  }


  /**
   * Sets the value of the 'establishmentId' field.
   * @param value the value to set.
   */
  public void setEstablishmentId(java.lang.CharSequence value) {
    this.establishmentId = value;
  }

  /**
   * Gets the value of the 'transactionAmount' field.
   * @return The value of the 'transactionAmount' field.
   */
  public double getTransactionAmount() {
    return transactionAmount;
  }


  /**
   * Sets the value of the 'transactionAmount' field.
   * @param value the value to set.
   */
  public void setTransactionAmount(double value) {
    this.transactionAmount = value;
  }

  /**
   * Gets the value of the 'authorizationDate' field.
   * @return The value of the 'authorizationDate' field.
   */
  public java.lang.CharSequence getAuthorizationDate() {
    return authorizationDate;
  }


  /**
   * Sets the value of the 'authorizationDate' field.
   * @param value the value to set.
   */
  public void setAuthorizationDate(java.lang.CharSequence value) {
    this.authorizationDate = value;
  }

  /**
   * Gets the value of the 'otherField' field.
   * @return The value of the 'otherField' field.
   */
  public java.lang.CharSequence getOtherField() {
    return otherField;
  }


  /**
   * Sets the value of the 'otherField' field.
   * @param value the value to set.
   */
  public void setOtherField(java.lang.CharSequence value) {
    this.otherField = value;
  }

  /**
   * Gets the value of the 'anotherField' field.
   * @return The value of the 'anotherField' field.
   */
  public java.lang.CharSequence getAnotherField() {
    return anotherField;
  }


  /**
   * Sets the value of the 'anotherField' field.
   * @param value the value to set.
   */
  public void setAnotherField(java.lang.CharSequence value) {
    this.anotherField = value;
  }

  /**
   * Gets the value of the 'evenAnotherField' field.
   * @return The value of the 'evenAnotherField' field.
   */
  public java.lang.CharSequence getEvenAnotherField() {
    return evenAnotherField;
  }


  /**
   * Sets the value of the 'evenAnotherField' field.
   * @param value the value to set.
   */
  public void setEvenAnotherField(java.lang.CharSequence value) {
    this.evenAnotherField = value;
  }

  /**
   * Creates a new Transactions RecordBuilder.
   * @return A new Transactions RecordBuilder
   */
  public static org.lautaropastorino.poc.Transactions.Builder newBuilder() {
    return new org.lautaropastorino.poc.Transactions.Builder();
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transactions RecordBuilder
   */
  public static org.lautaropastorino.poc.Transactions.Builder newBuilder(org.lautaropastorino.poc.Transactions.Builder other) {
    if (other == null) {
      return new org.lautaropastorino.poc.Transactions.Builder();
    } else {
      return new org.lautaropastorino.poc.Transactions.Builder(other);
    }
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Transactions instance.
   * @param other The existing instance to copy.
   * @return A new Transactions RecordBuilder
   */
  public static org.lautaropastorino.poc.Transactions.Builder newBuilder(org.lautaropastorino.poc.Transactions other) {
    if (other == null) {
      return new org.lautaropastorino.poc.Transactions.Builder();
    } else {
      return new org.lautaropastorino.poc.Transactions.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transactions instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transactions>
    implements org.apache.avro.data.RecordBuilder<Transactions> {

    private java.lang.CharSequence establishmentId;
    private double transactionAmount;
    private java.lang.CharSequence authorizationDate;
    private java.lang.CharSequence otherField;
    private java.lang.CharSequence anotherField;
    private java.lang.CharSequence evenAnotherField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.lautaropastorino.poc.Transactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.establishmentId)) {
        this.establishmentId = data().deepCopy(fields()[0].schema(), other.establishmentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[1].schema(), other.transactionAmount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.authorizationDate)) {
        this.authorizationDate = data().deepCopy(fields()[2].schema(), other.authorizationDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.otherField)) {
        this.otherField = data().deepCopy(fields()[3].schema(), other.otherField);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.anotherField)) {
        this.anotherField = data().deepCopy(fields()[4].schema(), other.anotherField);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.evenAnotherField)) {
        this.evenAnotherField = data().deepCopy(fields()[5].schema(), other.evenAnotherField);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Transactions instance
     * @param other The existing instance to copy.
     */
    private Builder(org.lautaropastorino.poc.Transactions other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.establishmentId)) {
        this.establishmentId = data().deepCopy(fields()[0].schema(), other.establishmentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[1].schema(), other.transactionAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.authorizationDate)) {
        this.authorizationDate = data().deepCopy(fields()[2].schema(), other.authorizationDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.otherField)) {
        this.otherField = data().deepCopy(fields()[3].schema(), other.otherField);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.anotherField)) {
        this.anotherField = data().deepCopy(fields()[4].schema(), other.anotherField);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.evenAnotherField)) {
        this.evenAnotherField = data().deepCopy(fields()[5].schema(), other.evenAnotherField);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'establishmentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEstablishmentId() {
      return establishmentId;
    }


    /**
      * Sets the value of the 'establishmentId' field.
      * @param value The value of 'establishmentId'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setEstablishmentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.establishmentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'establishmentId' field has been set.
      * @return True if the 'establishmentId' field has been set, false otherwise.
      */
    public boolean hasEstablishmentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'establishmentId' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearEstablishmentId() {
      establishmentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionAmount' field.
      * @return The value.
      */
    public double getTransactionAmount() {
      return transactionAmount;
    }


    /**
      * Sets the value of the 'transactionAmount' field.
      * @param value The value of 'transactionAmount'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setTransactionAmount(double value) {
      validate(fields()[1], value);
      this.transactionAmount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionAmount' field has been set.
      * @return True if the 'transactionAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionAmount' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearTransactionAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'authorizationDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuthorizationDate() {
      return authorizationDate;
    }


    /**
      * Sets the value of the 'authorizationDate' field.
      * @param value The value of 'authorizationDate'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setAuthorizationDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.authorizationDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationDate' field has been set.
      * @return True if the 'authorizationDate' field has been set, false otherwise.
      */
    public boolean hasAuthorizationDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'authorizationDate' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearAuthorizationDate() {
      authorizationDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherField' field.
      * @return The value.
      */
    public java.lang.CharSequence getOtherField() {
      return otherField;
    }


    /**
      * Sets the value of the 'otherField' field.
      * @param value The value of 'otherField'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setOtherField(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.otherField = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'otherField' field has been set.
      * @return True if the 'otherField' field has been set, false otherwise.
      */
    public boolean hasOtherField() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'otherField' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearOtherField() {
      otherField = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'anotherField' field.
      * @return The value.
      */
    public java.lang.CharSequence getAnotherField() {
      return anotherField;
    }


    /**
      * Sets the value of the 'anotherField' field.
      * @param value The value of 'anotherField'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setAnotherField(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.anotherField = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'anotherField' field has been set.
      * @return True if the 'anotherField' field has been set, false otherwise.
      */
    public boolean hasAnotherField() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'anotherField' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearAnotherField() {
      anotherField = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'evenAnotherField' field.
      * @return The value.
      */
    public java.lang.CharSequence getEvenAnotherField() {
      return evenAnotherField;
    }


    /**
      * Sets the value of the 'evenAnotherField' field.
      * @param value The value of 'evenAnotherField'.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder setEvenAnotherField(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.evenAnotherField = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'evenAnotherField' field has been set.
      * @return True if the 'evenAnotherField' field has been set, false otherwise.
      */
    public boolean hasEvenAnotherField() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'evenAnotherField' field.
      * @return This builder.
      */
    public org.lautaropastorino.poc.Transactions.Builder clearEvenAnotherField() {
      evenAnotherField = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transactions build() {
      try {
        Transactions record = new Transactions();
        record.establishmentId = fieldSetFlags()[0] ? this.establishmentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transactionAmount = fieldSetFlags()[1] ? this.transactionAmount : (java.lang.Double) defaultValue(fields()[1]);
        record.authorizationDate = fieldSetFlags()[2] ? this.authorizationDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.otherField = fieldSetFlags()[3] ? this.otherField : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.anotherField = fieldSetFlags()[4] ? this.anotherField : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.evenAnotherField = fieldSetFlags()[5] ? this.evenAnotherField : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transactions>
    READER$ = (org.apache.avro.io.DatumReader<Transactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.establishmentId);

    out.writeDouble(this.transactionAmount);

    out.writeString(this.authorizationDate);

    if (this.otherField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.otherField);
    }

    if (this.anotherField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.anotherField);
    }

    if (this.evenAnotherField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.evenAnotherField);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.establishmentId = in.readString(this.establishmentId instanceof Utf8 ? (Utf8)this.establishmentId : null);

      this.transactionAmount = in.readDouble();

      this.authorizationDate = in.readString(this.authorizationDate instanceof Utf8 ? (Utf8)this.authorizationDate : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.otherField = null;
      } else {
        this.otherField = in.readString(this.otherField instanceof Utf8 ? (Utf8)this.otherField : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.anotherField = null;
      } else {
        this.anotherField = in.readString(this.anotherField instanceof Utf8 ? (Utf8)this.anotherField : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.evenAnotherField = null;
      } else {
        this.evenAnotherField = in.readString(this.evenAnotherField instanceof Utf8 ? (Utf8)this.evenAnotherField : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.establishmentId = in.readString(this.establishmentId instanceof Utf8 ? (Utf8)this.establishmentId : null);
          break;

        case 1:
          this.transactionAmount = in.readDouble();
          break;

        case 2:
          this.authorizationDate = in.readString(this.authorizationDate instanceof Utf8 ? (Utf8)this.authorizationDate : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.otherField = null;
          } else {
            this.otherField = in.readString(this.otherField instanceof Utf8 ? (Utf8)this.otherField : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.anotherField = null;
          } else {
            this.anotherField = in.readString(this.anotherField instanceof Utf8 ? (Utf8)this.anotherField : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.evenAnotherField = null;
          } else {
            this.evenAnotherField = in.readString(this.evenAnotherField instanceof Utf8 ? (Utf8)this.evenAnotherField : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










